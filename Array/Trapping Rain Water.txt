class Solution{
    
    // arr: input array
    // n: size of array
    // Function to find the trapped water between the blocks.
    static long trappingWater(int arr[], int n) { 
        // Your code here
        long res = 0;
        int left_max[] = new int[n];
        int right_max[] = new int[n];
        
        // Calculating maximum left support
        left_max[0] = arr[0];
        for(int i = 1; i < n;i++)
        {
            left_max[i] = Math.max(left_max[i-1], arr[i]);
        }
        
        // Calculating maximum right support
        right_max[n-1] = arr[n-1];
        for(int i = n-2; i >= 0; i--)
        {
            right_max[i] = Math.max(right_max[i+1], arr[i]);
        }
        
        
        // Calcualting max supported water
        for(int i = 1; i < n-1;i++)
        {
            res = res + (Math.min(left_max[i], right_max[i]) - arr[i]);
        }
        
        return res;
    } 
}
